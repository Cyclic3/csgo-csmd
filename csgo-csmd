#!/usr/bin/env python3

# Requires -condebug and -conclearlog parameters in launch options!

from configparser import ConfigParser
from argparse import ArgumentParser, ArgumentTypeError, RawTextHelpFormatter
from bz2 import decompress
from pathlib import Path
from shutil import copyfileobj
from sys import stderr, exit
from typing import Any, Union
from urllib import request
from urllib.error import HTTPError
import os, stat
import re

__version__ = "1.0.0"

# Whitelist of directories where servers may download to
allowed_dirs = ['materials', 'sound', 'maps', 'models', 'particles']
# Allowed characters in path components
allowed_chars = re.compile('^[a-zA-Z0-9\[\]_. -]+$')
# List of file extensions where we create zero-size files in case the server
# doesn't have the file.
allow_spoof_file = ['.nav', '.mp3']

class ANSIColors:
    purple = '\033[95m'
    blue = '\033[94m'
    green = '\033[92m'
    yellow = '\033[93m'
    red = '\033[91m'
    bold = '\033[1m'
    end = '\033[0m'

def console_beep():
    print('\a')

class HTPPErrorHandler:
    def __init__(self, error: HTTPError) -> None:
        self.error = error

    def handle(self) -> None:
        if self.error.code == 404:
            print("{0}  Not found on the server, skipping{1}"
                  .format(ANSIColors.yellow, ANSIColors.end))
        else:
            raise self.error


class VerifyCLASyntax:
    @staticmethod
    def path(path: Union[str, Path]) -> Union[str, Path]:
        if isinstance(path, Path):
            if not path.exists():
                raise ArgumentTypeError("{0}Path does not exist.{1}"
                                        .format(ANSIColors.red, ANSIColors.end))
            else:
                return path
        if isinstance(path, str):
            if not Path(path).exists():
                raise ArgumentTypeError("{0}Path does not exist.{1}"
                                        .format(ANSIColors.red, ANSIColors.end))
            else:
                return path


class ShouldNeverHappenError(Exception):
    pass


class CSMD:
    def __init__(self) -> None:
        self.csgo_path = None
        self.condump = None
        self.config_path = None
        self.use_fifo = False
        self.servers = []

        self.config_path = Path.home().joinpath(".config/csmd/csmd.conf")
        if not self.config_path.exists():
            self.config_path.parents[0].mkdir(parents=True, exist_ok=True)
            self.write_default_config()

    @staticmethod
    def show_header() -> None:
        print("{0}{1}CS:GO Community Server Materials Downloader v{2}{3}"
              .format(ANSIColors.bold, ANSIColors.purple,
                      __version__, ANSIColors.end))

    @staticmethod
    def prohibit_root() -> None:
        from os import geteuid

        if geteuid() == 0:
            print("{0}{1}Don't run this script as root!{2}"
                  .format(ANSIColors.red, ANSIColors.bold, ANSIColors.end),
                  file=stderr)
            exit(-1)

    def write_default_config(self) -> None:
        config = ConfigParser()
        config['path'] = {}
        config['path']['csgo_path'] = str(Path.home().joinpath(
            ".local/share/Steam/steamapps/common/"
            "Counter-Strike Global Offensive/csgo"))

        config['log'] = {}
        config['log']['use_fifo'] = False

        with self.config_path.open('w') as f:
            config.write(f)

    def create_fifo(self) -> None:
        # TODO: check if fifo is opened, so we don't delete it from underneath csgo

        # Check to see if the console file is a fifo.
        # If it is not delete it
        if not stat.S_ISFIFO(os.stat(self.condump).st_mode):
            os.unlink(self.condump)

        if not self.condump.exists():
            print("{0}{1}Having to create fifo. If CS:GO is open, you will need to run the following command: {3}"
                   .format(ANSIColors.bold, ANSIColors.yellow, ANSIColors.end))

            print('con_logfile "{0}"'
                  .format(self.condump))

            print('')

            # Create the fifo
            os.mkfifo(self.condump)


    def parse_config(self) -> None:
        parser = ConfigParser()
        try:
            parser.read_file(self.config_path.open())
        except FileNotFoundError:
            print("{0}Incorrect path to config{1}"
                  .format(ANSIColors.red, ANSIColors.end))
            exit(1)
        try:
            self.csgo_path = Path(parser['path']['csgo_path'])
        except KeyError:
            print("{0}Incorrect csmd.conf{1}"
                  .format(ANSIColors.red, ANSIColors.end))
            exit(1)
        # Check to see if named pipes are requested (default: false)
        self.use_fifo = parser['log'].getboolean('use_fifo', False)

    @staticmethod
    def setup_args() -> ArgumentParser:
        parser = ArgumentParser(
            formatter_class=RawTextHelpFormatter,
            epilog="More: https://github.com/light2yellow/csgo-csmd")
        parser.add_argument(
            "--config-path",
            help="Path to CSMD config (default:\n"
                 "/home/$USER/.config/csmd/csmd.conf)",
            type=VerifyCLASyntax.path)
        parser.add_argument(
            "--csgo-path",
            help="Path to CS:GO home folder (default:\n"
                 "/home/$USER/.local/share/Steam/steamapps/common/Counter-Strike Global Offensive/csgo)",
                 type=VerifyCLASyntax.path)
        return parser

    def parse_args(self, args: Any) -> None:
        if args.config_path:
            self.config_path = Path(args.config_path)
        self.parse_config()

        if args.csgo_path:
            self.csgo_path = Path(args.csgo_path)
        else:
            VerifyCLASyntax.path(self.csgo_path)

        self.condump = self.csgo_path.joinpath('console.log')

    def check_material_path(self, path: str) -> None:
        parts = path.split('/')

        for part in parts:
            part = part.strip()
            # "Empty part" check catches absolute paths (starting with /)
            if part == '':
                print("{0}{1}Path {2} suspicious (empty part){3}".format(
                    ANSIColors.bold, ANSIColors.red, path, ANSIColors.end))
                exit(1)
            # ".." not allowed at all in part components (directory traversal)
            if part.find('..') != -1:
                print("{0}{1}Path {2} suspicious (dot-dot in part){3}".format(
                    ANSIColors.bold, ANSIColors.red, path, ANSIColors.end))
                exit(1)
            # Just to be sure, some "allowed characters" check
            if not allowed_chars.match(part):
                print("{0}{1}Path {2} suspicious (invalid character){3}".format(
                    ANSIColors.bold, ANSIColors.red, path, ANSIColors.end))
                exit(1)

        if not parts[0] in allowed_dirs:
            print("{0}{1}Directory {2} not on whitelist{3}".format(
                ANSIColors.bold, ANSIColors.red, parts[0], ANSIColors.end))
            exit(1)

    def spoof_path(self, path: str) -> None:
        filename, extension = os.path.splitext(path)
        if extension in allow_spoof_file:
            print("{0}{1}Creating zero byte file {2}{3}".format(
                ANSIColors.bold, ANSIColors.green, path, ANSIColors.end))
            open(self.csgo_path.joinpath(path), 'a').close()

    def download_one_material(self, material: str, ep: str, base_url: str) -> None:
#        for server in self.servers:
            # Skip servers without download requirement
#            if (len(server['materials']) == 0):
#                continue

#            print("\n{0}Server: {1}{2}"
#                  .format(ANSIColors.blue, server['ip_port'], ANSIColors.end))
#            print("{0}Base URL: {1}{2}\n"
#                  .format(ANSIColors.blue, server['base_url'], ANSIColors.end))

#            for material in server['materials']:
                print("{0}{1}Requesting {2}{3}".format(
                    ANSIColors.bold, ANSIColors.purple, material, ANSIColors.end))

                self.check_material_path(material)

                url = base_url + material
                # Very primitive "URL escape" (just handle space for now)
                url = url.replace(' ', '%20')
                fpath = self.csgo_path.joinpath(material)

                # Create request to with proper User-Agent and Referer.
                # Probably allows to bypass some server-side filtering.
                req = request.Request(
                    url,
                    data = None,
                    headers = {
                        'User-Agent': 'Half-Life 2',
                        'Referer': 'hl2://' + ep
                    }
                )

                # Since we don't download archives and decompress
                # on-the-fly, no *.bz2 files will be present and
                # therefore we check for with_suffix(""), too
                if fpath.exists() or fpath.with_suffix("").exists():
                    return
                else:
                    # mkdir -p
                    fpath.parents[0].mkdir(parents=True, exist_ok=True)

                # Decompressing on-the-fly, thus with_suffix("")
                if fpath.suffix == ".bz2":
                    try:
                        with request.urlopen(req) as response, \
                             fpath.with_suffix("").open('wb') as f:

                            # Some servers deliver the "uncompressed file" if
                            # the .bz2 is requested and just tell us via
                            # header. Handle this case and abort download.
                            # The "non-bz2" file is handled later anyway.
                            if 'Content-Disposition' in response.headers:
                                if response.headers['Content-Disposition'].find('.bz2') == -1:
                                    return

                            print("{0}{1} Decompressing bzip2{3}"
                                  .format(ANSIColors.bold, ANSIColors.blue,
                                          material, ANSIColors.end))
                            f.write(decompress(response.read()))
                    except HTTPError as err:
                        HTPPErrorHandler(err).handle()
                        # We know that we ignore 404 and raise
                        # everything else, so it's safe to continue
                        return
                else:
                    try:
                        with request.urlopen(req) as response, \
                                fpath.open('wb') as f:
                            # Use shutil to write response on-the-fly
                            copyfileobj(response, f)
                    except HTTPError as err:
                        HTPPErrorHandler(err).handle()
                        self.spoof_path(material)
                        # We know that we ignore 404 and raise
                        # everything else, so it's safe to continue
                        return

    # This is now the caller, so that we do not have to reach an EOF before downloading
    def parse_console_log(self) -> None:

        # Create the fifo if required
        if (self.use_fifo):
            self.create_fifo()

        # Set this to None to catch errors
        current_server_ep = None
        current_server_url = None
        current_server_base_url = None

        all_loaded = True

        with self.condump.open() as file:
            # We need to read line by line for fifo compatibility
            for line in file:
                if line.startswith("Connected to"):
                    current_server_ep = line.split()[-1]

                elif line.startswith("Downloading "):
                    current_server_url = line[12:].strip()

                elif line.startswith("Aborting download of "):
                    # Set this after we start downloading,
                    # so we don't get annoying beeps all the time
                    all_loaded = False

                    rpath = line[21:].strip()
                    i = 0
                    try:
                        i = current_server_url.index(rpath)
                    except ValueError:
                        print("{0}{1}Relative path not found in full URL!{2}"
                              .format(ANSIColors.bold, ANSIColors.red, ANSIColors.end))
                        exit(1)
                    current_server_base_url = current_server_url[0:i]
                    try:
                        self.download_one_material(rpath, current_server_ep, current_server_base_url)
                    except TypeError:
                        print("{0}{1}Unable to determine server information{2}"
                              .format(ANSIColors.bold, ANSIColors.red, ANSIColors.end))
                        exit(1)

                elif line.startswith("Discarding queued download of "):
                    rpath = line[30:].strip()
                    try:
                        self.download_one_material(rpath, current_server_ep, current_server_base_url)
                    except TypeError:
                        print("{0}{1}Unable to determine server information{2}"
                              .format(ANSIColors.bold, ANSIColors.red, ANSIColors.end))
                        exit(1)

                elif line.startswith("ChangeGameUIState") and not all_loaded:
                    console_beep()
                    all_loaded = True
                    print("\n{0}{1}Success!{2}"
                          .format(ANSIColors.bold, ANSIColors.blue, ANSIColors.end))



if __name__ == '__main__':
    CSMD.show_header()
    CSMD.prohibit_root()

    csmd = CSMD()
    csmd.parse_args(CSMD.setup_args().parse_args())
    csmd.parse_console_log()

